SNAPSHOT TESTS WITH JEST:

- how it works is that when the test is first run, the output is saved to a snapshot file and then when the test is ran
in the future, the output is compared to the snapshot file. If the output matches the file, the test passes, if the
output is different, then the test fails

- snapshot testing is not for everything, but they are optimized for special cases
- the are good for testing less clearly defined behaviour that may change often. the classic example of this and the main
focus if descussion around Jest snapshots is for UI testing
- they are able to catch the small suttle changes of the UI



UNIT TESTS WITH ENZYME
-first we have to download and install it, then we have to import { shallow  } from enzyme and we use shallow to
to render the component
- shallows renders the component without children components

general guidelines for enzyme:
1) always begin with a shallow test
2) if componenntDidMount() or componentDidUpdate() should be tested, use mount()
3)if you want to test component lifecycle and shildren behaviour use mount()
4)if you want to test children rendering with less overhead than mount() and your are not interested in lifecycle methods
use render()
- make sure to keep the unit tests simple and maintainable, Otherwise you will have to refactor them once you
change the components
- so we need to import Enzyme and then configure to set up a new adapter
- so when we are running npm test, we are using jest

- when testing the describe method allows us to group together simular tests, it() acts simular to describe()
-Enzyme makes testing React Components eaiser. we should install it and then set up a setupTests.js file in order to
set up an adapter

- so the shallow render will only test the component that it is rendering, not any component that was rendered within
the component that is getting tested
-shallow is a type of unit test for React. A unit test is a test specifically designed to only test one function.
When we are testing functions that rely on other functions, we refer to such tests as integrated tests
- you can do an integrated test with mount(), this is a full rendering test that takes the entire component tree and
lifecycle methods into consideration

- so right now I am setting up Material UI and I will create a NavBar and then the card components with the pictures


MATERIAL UI:
- the Roboto font is automaticall loaded by the material-ui
- themes let us apply a consistent tone to the app, it allows us to customize all design aspects of the project in order
to meet the specific needs of the business or brand. light and dark themes are avilable to choos from, by default,
components use the light theme type. if the theme need to be customized you should use the ThemeProvider componenet in
order to inject a theme into the application
-if we are using the ThemeProvider, we should make sure that it is on a parent component so that it can pass the themes
down to the children components.

- so we are trying to change the deafult text of material ui. for this we have to use theming. When using theming we have
to add a ThemeProvider to the top level of the app, so we import the ThemeProvider and then we wrap it around the
componenet that we want to change and then we provide the ThemeProvider with a theme
- you use themes to override styles

GRID:
-the grid component is based on a 12column grid layout.
-it uses CSS Flexible Box module for high flexability
- so we have a container grid and an item grid. The container is what is wrapped around the item grid

CARD:
- we can override styles with global classnames but you can also do that with a shorthand. That short hand is the
withStyles() higher-order componenet and it is injecting classes property that gets used by the component. A higher
order component transforms a component into another component.
- however the way that the card component does things is not the same. the with styles is not a higher order component but
it appears to be a method that returns an object with the appropriate properties that you can acccess and put in your
classnames.
- so I think I have the conditional rendering mixed up. the docs say that conditional rendering lets you create
distinct components that encapsulate behaviour and then only render the components that are needed
- so when conditional rendering, you so have to do render components
- so storage object are not iterable one way to loop over them as an array. so we dont want to use the for in loop
because of it loops ever all the property names in an object
- Thats why we should use the normal for loop. it wont enumerate the prototype chain

REACT ROUTER:
- first we will need to set up the app to work with React Router. everything that gets rendered will need to go inside a
<BrowserRouter> component. so for ours we will have to wrap the App component with the BrowserRouter component.
- then inside our app component we add the switch element, these will ensure that only component is rendered at a time
- then inside the <Switch> tags we place the <Route> tags, theses are the links between the components. We provide the
<Route> tag with a path='/' and specify what component we want to render component={home}
- for the home route we need to specify 'exact' this will make sure that the home page will only be matched if it is
just the /

- to make the app navigatble through clicks, we need to use the Link component and provide it with a 'to='/'' element
that specifies where it is going.

- so everything that gets rendered will go inside of BrowserRouter
- so now that we have wrapped our App component in the BrowserRouter. we go inside the app and wrap everthing that
we want to be part of the conditional rendering with a Switch component

- so we encountered an problem with the react router component saying that we have passed it in the wrong type. So not
exactly sure what is happening but I believe that we can fix this by creating a new home component and let it do
the rendering there. So that worked

- the next thing that I have to do is the component with all the saved images. we want to be able to loop thorugh all the
images that are stored in the session storage. and then have those images be displayed in a material ui grid

- so we want to have our saved component we got that. then we want a function that will loop thorugh the session storage
and assign all those values to an array. and then we want to map over those to display a grid.
- so now that we have the function that loops over the and returns an array of sessionStorage stuff we need to get a Grid
going

HOOKS:
- during the initial render, the returned state is the same as the value passed as the first argument(initialState)
- the setState function is used to update the state, it accepts a new state value and enqeues a re-render of the component
- if the initial state is computed using the previous state, you can pass a function to setState. the function will
recieve the previous value, and return an updated value. So for our project, we will be passing it a function to calculate
the new state. if the update function returns the same value as the old state then the rerender will be skipped
- useState does not automatically merge update objects, if we wan this we have to do it manually

-so what we are going to do:
we are going to create a state hook out of the sessionStorage array, then still pass that to the component. we have to
pass down the value hook and the set value hook. then we have a function in the component and that fuction will be called
when the delete button is pressed.
- the function should change the hook and enqeue a rerendering which should make our image go away. hopefully.

ARRAYS:
-how to delete things from an array, we can use pop to remove items from the end of the array, use shift to to delete
things from the beggining of the array.of the middle of the array using splice.the javascript filter method looks
very promising for us.
- so ya I think we are going to use the filter method
- the filter method() creates a new array with all the elements that pass the test implemented by the provided function
-so we provide filter with a funciton and then inside the funciton we have a test, if the values pass the test, then
they are added to the new array 


NPM:
-the package.json file can be described as a manifest of your project that includes tha packages and applications
it depends on, information about its unique source control, and specific metadata like the project's name, description
and author.
- the package.json file is always structured in JSON information
- we can use npm init --yes to instantly initialize a Project
- so when you install a module it gets stored into /node_modules folder
- npm i is the same thing as npm install
-so when we use --save that is adding the module as a dependency of our project as an entry in dependencies
but the --save-dev will be used to save something to the dev dependencies

- so when we just run npm install <module>, it will install that module in the existing node_modules directory.



WHAT NEEDS TO BE DONE
1) save and unsave functionality of the button conditional rendering (DONE)
1.5) saves image tag to local or session storage. (DONE)
2) new page with all the saved dogs, with delete functionality
3) button to let you refresh new images
4) tests
5) launch
6) finish the react book
7) start the express book
8) build backend app
9) build full stack app
